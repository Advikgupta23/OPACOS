import numpy as np
import pandas as pd
#from scipy.interpolate import interp1d
from matplotlib.backends.backend_pdf import PdfPages 
import matplotlib.pyplot as plt
from isobuild import func
from multiprocessing import Pool

#from constants import age, feh, nstars, imf_slope
# define array of [Fe/H] from -3 to 0.5 in steps of 0.1
feh = np.arange(-3, 0.6, 0.1)
#feh = np.array([-3.])  # smaller range of [Fe/H]
# define array of ages from 0.5 to 13 in steps of 0.5. Units of Gyr
age = np.arange(0.5, 14.5, 0.125)
#age = np.array([11.1])  # smaller range of ages

nstars = 100000  # number of stars
imf_slope = -2.35  # IMF slope. -2.35 is Salpeter pure power-law
imf_type = 'kroupa' # You can use three IMF systems: * salpeter 
                      #                                * kroupa  
                      #                                * chabrierlognormal

Phot_sys = '2mass' # You can use * 'GAIA_EDR3' or * '2mass'
                             
fai_lim = 14.0  # faint magnitude limit 20.0 19.0
bri_lim = 12.0   # bright magnitude limit 3.0 12.0 
col_slo = 0.0  # colour slope 0.20
blu_lim = -100.0  # lower colour limit -2.5 0
red_lim = 100.0  # upper colour limit 5.1 1.5

low_l = -9  # log(g) cut. E.g. between 1 and 4. If you write
hig_l = -9  # -9. and -9, then log(g) cut is ignored.

midi = 10.0  # minimum distance
madi = 10000.0  # maximum distance
dedi = 100.0  # distance step

R_BP = 3.1
R_RP = 2.2
R_G = 2.7

R_J = 0.72
R_K = 0.306
R_V = 3.1

#G_long = 309.1
#G_lat = 14.97

G_long = 63.0
G_lat = -6.0

def read_columns(filepath):
    
    chunk = pd.read_csv(filepath, sep = '\s+', comment='#', header=None,
                         names = ['mini','mfin','age','feh','distance','l','b','px','py','pz','popid','exbv_schlegel'],
                         usecols = [0,1,2,3,4,5,6,7,8,9,10,11], chunksize = 200)
    data = pd.concat(chunk)
    
    return data

ex_bv = [0.00000,
   0.00737141,
    0.0148298,
    0.0169094,
    0.0172733,
    0.0173091,
    0.0173111,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112,
    0.0173112    
]


# ex_bv = [0.00000,
#    0.00486340,
#     0.0146415,
#     0.0244555,
#     0.0342659,
#     0.0440335,
#     0.0537197,
#     0.0632874,
#     0.0727012,
#     0.0819284,
#     0.0909387,
#     0.0997054,
#      0.108205,
#      0.116416,
#      0.124334,
#      0.131995,
#      0.139639,
#      0.148067,
#      0.159028,
#      0.174737,
#      0.195937,
#      0.220185,
#      0.242765,
#      0.259714,
#      0.270334,
#      0.276751,
#      0.281292,
#      0.285121,
#      0.288598,
#      0.291806,
#      0.294768,
#      0.297500,
#      0.300014,
#      0.302323,
#      0.304441,
#      0.306379,
#      0.308150,
#      0.309814,
#      0.311452,
#      0.313087,
#      0.314778,
#      0.316564,
#      0.318489,
#      0.320506,
#      0.322473,
#      0.324282,
#      0.325845,
#      0.327124,
#      0.328129,
#      0.328906,
#      0.329512,
#      0.330000,
#      0.330408,
#      0.330749,
#      0.331055,
#      0.331331,
#      0.331579,
#      0.331802,
#      0.332002,
#      0.332183,
#      0.332345,
#      0.332491,
#      0.332622,
#      0.332740,
#      0.332846,
#      0.332942,
#      0.333028,
#      0.333106,
#      0.333176,
#      0.333239,
#      0.333296,
#      0.333347,
#      0.333394,
#      0.333436,
#      0.333474,
#      0.333508,
#      0.333539,
#      0.333568,
#      0.333594,
#      0.333617,
#      0.333638,
#      0.333658,
#      0.333675,
#      0.333692,
#      0.333706,
#      0.333720,
#      0.333732,
#      0.333743,
#      0.333754,
#      0.333763,
#      0.333772,
#      0.333780,
#      0.333788,
#      0.333795,
#      0.333801,
#      0.333807,
#      0.333812,
#      0.333817,
#      0.333822,
#      0.333826
# ]
# ex_bv = [0.00000,
#    0.00829397,
#     0.0199075,
#     0.0257885,
#     0.0283133,
#     0.0292024,
#     0.0294473,
#     0.0294992,
#     0.0295077,
#     0.0295087,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088,
#     0.0295088
# ]

#ex_bv = [0.00000,
#    0.00475481,
#     0.0138374,
#     0.0221116,
#     0.0293755,
#     0.0355291,
#     0.0405647,
#     0.0445462,
#     0.0475870,
#     0.0498282,
#     0.0514210,
#     0.0525116,
#     0.0532303,
#     0.0536862,
#     0.0539643,
#     0.0541275,
#     0.0542195,
#     0.0542695,
#     0.0542955,
#     0.0543086,
#     0.0543149,
#     0.0543178,
#     0.0543191,
#     0.0543197,
#     0.0543199,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200,
#     0.0543200

    
#]
# ex_bv=[0.00000,
#    0.00741452,
#     0.0149364,
#     0.0170223,
#     0.0173801,
#     0.0174139,
#     0.0174156,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157,
#     0.0174157

# ]

#ex_bv=[0.00000,
#   0.00932360,
#    0.0276988,
#    0.0455099,
#    0.0625388,
#    0.0786040,
#    0.0935684,
#     0.107342,
#     0.119881,
#     0.131184,
#     0.141284,
#     0.150238,
#     0.158123,
#     0.165023,
#     0.171029,
#     0.176228,
#     0.180704,
#     0.184537,
#     0.187799,
#     0.190557,
#     0.192873,
#     0.194804,
#     0.196401,
#     0.197711,
#     0.198777,
#     0.199637,
#     0.200325,
#     0.200871,
#     0.201300,
#     0.201634,
#     0.201892,
#     0.202090,
#     0.202240,
#     0.202353,
#     0.202438,
#     0.202501,
#     0.202547,
#     0.202581,
#     0.202606,
#     0.202623,
#     0.202636,
#     0.202645,
#     0.202651,
#     0.202656,
#     0.202659,
#     0.202661,
#     0.202662,
#     0.202663,
#     0.202664,
#     0.202664,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665,
#     0.202665
#]

#ex_bv = [0.00000,
#   0.00760444,
#    0.0158198,
#    0.0183859,
#    0.0189184,
#    0.0189837,
#    0.0189883,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,Results
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884,
#    0.0189884
#]
#ex_bv = [0.00000,
#   0.00482103,
#    0.0143642,
#    0.0237070,
#    0.0327714,
#    0.0414870,
#    0.0497924,
#    0.0576371,
#    0.0649820,
#    0.0718002,
#    0.0785043,
#    0.0983934,
#     0.126118,
#     0.132705,
#     0.136850,
#     0.140501,
#     0.143695,
#     0.146465,
#     0.148847,
#     0.150877,
#     0.152592,
#     0.154027,
#     0.155218,
#     0.156197,
#     0.156995,
#     0.157639,
#     0.158154,
#     0.158563,
#     0.158885,
#     0.159135,
#     0.159329,
#     0.159477,
#     0.159590,
#     0.159675,
#     0.159739,
#     0.159786,
#     0.159820,
#     0.159846,
#     0.159864,
#     0.159877,
#     0.159887,
#     0.159894,
#     0.159898,
#     0.159902,
#     0.159904,
#     0.159906,
#     0.159907,
#     0.159907,
#     0.159908,
#     0.159908,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909,
#     0.159909
#]

#ex_bv = [0.00000,
#   0.00971933,
#    0.0298951,
#    0.0504402,
#    0.0705431,
#    0.0894206,
#     0.106442,
#     0.121215,
#     0.133605,
#     0.143701,
#     0.151733,
#     0.157998,
#     0.162795,
#     0.166400,
#     0.169047,
#    0.170941,
#     0.172256,
#    0.173137,
#    0.173707,
 #    0.174061,
 #   0.174271,
  #   0.174392,
   #  0.174458,
    # 0.174492,
#     0.174509,
#     0.174517,
#     0.174520,
#    0.174522,
#     0.174522,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#    0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#    0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
#     0.174523,
 #    0.174523,
 #    0.174523
#]

#ex_bv = [0.00000,
#   0.00969031,
#    0.0292622,
#    0.0477759,
#    0.0639448,
#    0.0770997,
#    0.0872092,
#    0.0946552,
#    0.0999623,
#     0.103629,
#    0.106073,
#     0.107633,
#     0.108580,
#     0.109125,
#     0.109421,
#     0.109572,
#     0.109645,
#     0.109678,
#     0.109693,
#     0.109698,
#     0.109700,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#     0.109701,
#]
#ex_bv = [0.00000, 0.00487944, 0.0147582, 0.0249122, 0.0449776, 0.167962, 0.366898, 0.425430, 0.438008, 0.449071, 0.460303, 0.471713, 0.483303, 0.495074, 0.507439, 0.520626, 0.534348, 0.548641, 0.563514, #0.578939, 0.594847, 0.611138, 0.627885, 0.645108, 0.662579, 0.680253, 0.698096, 0.716082, 0.734179, 0.752340, 0.769760, 0.787337, 0.804936, 0.822449, 0.839805, 0.856978, 0.873977, 0.890843, 0.907150, #0.923606, 0.940205, 0.956941, 0.973809, 0.990802, 1.00791, 1.02513, 1.04246, 1.05988, 1.07739, 1.09498, 1.11264, 1.13036, 1.14813, 1.16595, 1.18381, 1.20169, 1.21959, 1.23749, 1.25540, 1.27329, 1.29116, #1.30900, 1.32681, 1.34456, 1.36226, 1.37990, 1.39746, 1.41494, 1.43232, 1.44961, 1.46679, 1.48386, 1.50081, 1.51763, 1.53432, 1.55087, 1.56727, 1.58352, 1.59962, 1.61555, 1.63132, 1.64692, 1.66235, #1.67760, 1.69268, 1.70757, 1.72228, 1.73681, 1.75115, 1.76530, 1.77926, 1.79303, 1.80686, 1.82077, 1.83494, 1.84960, 1.86489, 1.88090, 1.89761, 1.91543]
#filename = 'galaxia.dat'
#data = read_columns(filename)

#l = data['l']
#b = data['b']
#data.sort_values(by=['distance'], ascending=[True], inplace=True, ignore_index=True)

#ex_bv = data['exbv_schlegel']
#distance_model = data['distance']

def inter_rout(x1, y1, x2, y2, x): 
    y = ( (y2-y1)/(x2-x1) ) * (x-x1) + y1
    return y

with open('results.dat', 'w') as f:

    f.write(f'# stars {nstars}\n')
    if imf_type == 'salpeter':
       f.write(f'# Salpeter IMF = {imf_slope:.4f}\n')
    else:
       f.write(f'# IMF = {imf_type}\n')
    f.write(f'# Photometric System used:{Phot_sys}\n')
    f.write(f'# faint magnitude limit = {fai_lim:.4f}\n')
    f.write(f'# bright magnitude limit = {bri_lim:.4f}\n')
    f.write(f'# colour slope = {col_slo:.4f}\n')
    f.write(f'# blue cut = {blu_lim:.4f} and red cut = {red_lim:.4f}\n')
    f.write(f'# sampled distances from {midi:.1f} to {madi:.1f} in steps of {dedi:.1f} pc\n')
    if low_l < -8 and hig_l < -8:
       f.write('# no logg cut\n')
    else:
       f.write(f'# {low_l:.2f} < logg < {hig_l:.2f}\n')
    f.write('#------------------------------------------------------\n')
    f.write('#                                                      \n')
    f.write('#    Age(Gyr)       [Fe/H]    distance     Prob        \n')

    
    #def save_multi_image(filename):
    #    pp = PdfPages(filename)
    #    fig_nums = plt.get_fignums()
    #    figs = [plt.figure(n) for n in fig_nums]
    #    for fig in figs:
    #        fig.savefig(pp, format='pdf')
    #    pp.close()    
    
    
    Func = func(age, feh, nstars, imf_slope, imf_type)

    # Perform any necessary setup or initialization
    Func.prepare_computations()
    
    # Computation cycle through age-metallicity grid
    #for distance in np.arange(midi, madi, dedi):
        #for index in range(len(distance_model)):
            #          if distance_model[index] > dis:
            #             i = index
            #             break	
            #ex_bv_dist = inter_rout(distance_model[i-1],ex_bv[i-1],distance_model[i],ex_bv[i],dis)
            #ex_bv_long = inter_rout(l[i-1],ex_bv[i-1],l[i],ex_bv[i],G_long)
            #ex_bv_lat = inter_rout(b[i-1],ex_bv[i-1],b[i],ex_bv[i],G_lat)
            #extinc_bv = np.sum(ex_bv_dist + ex_bv_long + ex_bv_lat)/3
            #extinc_bv = round(extinc_bv,4)
        
            #extinc_bv = np.sum(ex_bv[i-1] + ex_bv[i])/2
            #extinc_bv = round(extinc_bv,4)
        
            #blu_limit = blu_lim + extinc_bv*(R_BP-R_RP)
            #blu_limit = round(blu_limit,4)
            #red_limit = red_lim + extinc_bv*(R_BP-R_RP)
            #red_limit = round(red_limit,4)
            #fai_limit = fai_lim + extinc_bv*(R_G)
            #fai_limit = round(fai_limit,4)
            #bri_limit = bri_lim + extinc_bv*(R_G)
            #bri_limit = round(bri_limit,4) 
    
    for tau in age:
        
        for metal in feh:
           
           #pool = Pool(processes=10)
           #lst = [(1,2),(3,4),(5,6)]
           color, mag, logg, nstars = Func.compute_parameters(tau, metal, Phot_sys)
           
           #plt.figure()
           #plt.scatter(color,mag,s=0.5)
           #plt.xlabel('J-K')
           #plt.ylabel(r'$M_{V}$')
           #plt.gca().invert_yaxis()
           
           
           #plt.show()
           #fig = plt.gcf()
           #plt.savefig(f'Plots/isochrone_age({tau})_metal({metal}).png')
           count = 0
           for distance in np.arange(midi, madi, dedi):
               
               dis = float(distance)
               apparent = mag + 5.0 * np.log10(dis) - 5.0

               # plt.figure()
               # plt.scatter(color,apparent,s=0.5)
               # plt.xlabel('J-K')
               # plt.ylabel(r'$m_{V}$')
               # plt.gca().invert_yaxis()
               # plt.style.use('dark_background')

               # #plt.show()
               # fig = plt.gcf()
               # plt.savefig(f'Plots/isochrone_age({tau})_metal({metal})_distance({dis}).png')
               # plt.close()

               if Phot_sys == '2mass': 
                  
                  extinc_bv = ex_bv[count]
                  count+=1

                  blu_limit = blu_lim + extinc_bv*(R_J-R_K)
                  blu_limit = round(blu_limit,4)
                  red_limit = red_lim + extinc_bv*(R_J-R_K)
                  red_limit = round(red_limit,4)
                  fai_limit = fai_lim + extinc_bv*(R_V)
                  fai_limit = round(fai_limit,4)
                  bri_limit = bri_lim + extinc_bv*(R_V)
                  bri_limit = round(bri_limit,4)
                  
                  if low_l < -8 and hig_l < -8:
                     passed = np.sum((color >= blu_limit) & (color <= red_limit) &
                                    (apparent <= fai_limit - col_slo * color) &
                                    (apparent >= bri_limit - col_slo * color))
                  else:
                     passed = np.sum((color >= blu_limit) & (color <= red_limit) &
                                    (apparent <= fai_limit - col_slo * color) &
                                    (apparent >= bri_limit - col_slo * color) &
                                    (logg >= low_l) & (logg <= hig_l))
                
                  prob = float(passed) / float(nstars)
           
                  f.write(f'       {tau:.3f}        {metal:.2f}      {distance:.2f}        {prob:.6f}\n')

               if Phot_sys == 'GAIA_EDR3':
                  #for index in range(len(distance_model)):
                  #    if distance_model[index] > dis:
                  #       i = index
                  #       break	
                  #ex_bv_dist = inter_rout(distance_model[i-1],ex_bv[i-1],distance_model[i],ex_bv[i],dis)
                  #ex_bv_long = inter_rout(l[i-1],ex_bv[i-1],l[i],ex_bv[i],G_long)
                  #ex_bv_lat = inter_rout(b[i-1],ex_bv[i-1],b[i],ex_bv[i],G_lat)
                  #extinc_bv = np.sum(ex_bv_dist + ex_bv_long + ex_bv_lat)/3
                  #extinc_bv = round(extinc_bv,4)
                  
                  #extinc_bv = np.sum(ex_bv[i-1] + ex_bv[i])/2
                  
                  extinc_bv = ex_bv[count]
                  count+=1
                  
                  blu_limit = blu_lim + extinc_bv*(R_BP-R_RP)
                  blu_limit = round(blu_limit,4)
                  red_limit = red_lim + extinc_bv*(R_BP-R_RP)
                  red_limit = round(red_limit,4)
                  fai_limit = fai_lim + extinc_bv*(R_G)
                  fai_limit = round(fai_limit,4)
                  bri_limit = bri_lim + extinc_bv*(R_G)
                  bri_limit = round(bri_limit,4)
                  #print(extinc_bv)
                                                     
                  if low_l < -8 and hig_l < -8:
                     
                     passed = np.sum((color >= blu_limit) & (color <= red_limit) &
                                    (apparent <= fai_limit - col_slo * color) &
                                    (apparent >= bri_limit - col_slo * color))
                  else:
                     passed = np.sum((color >= blu_limit) & (color <= red_limit) &
                                    (apparent <= fai_limit - col_slo * color) &
                                    (apparent >= bri_limit - col_slo * color) &
                                    (logg >= low_l) & (logg <= hig_l))
                
                  prob = float(passed) / float(nstars)
           
                  f.write(f'       {tau:.3f}        {metal:.2f}      {distance:.2f}        {prob:.6f}\n')                 
          
           
           
        print(f'done with grid at {tau} Gyr')
    #filename = "plots.pdf"
    #save_multi_image(filename)cd 
